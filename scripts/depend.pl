use File::Basename;

my %exts = (
   "c"   => { "env" => "CFLAGS",                    "cc" => "\$(CC)"  }, 
   "cc"  => { "env" => "CXXFLAGS CFLAGS",           "cc" => "\$(CXX)" }, 
   "cpp" => { "env" => "CXXFLAGS CFLAGS",           "cc" => "\$(CXX)" }, 
   "m"   => { "env" => "OBJCFLAGS CFLAGS",          "cc" => "\$(CC)"  }, 
   "mm"  => { "env" => "OBJCFLAGS CXXFLAGS CFLAGS", "cc" => "\$(CXX)" }, 
   "S"   => { }, 
);

my %flags_cache;
my $project = $ENV{'PROJECT'};

sub get_flags
{
   my $flags = @_[0];
   my $res = $flags_cache{$flags};
   if (!$res)
   {
      my @arr = ();

      foreach $var (split(/ /, $flags))
      {
         foreach $env (split(/ /, $ENV{$var}))
         {
            if ($env =~ /^-I([^\/].*)/)
            {
               push @arr, $1;
            }
         }

         if (defined($project))
         {
            my $inner = $ENV{"$project" . "_$var"};
            if (defined($inner))
            {
               foreach $env (split(/ /, $inner))
               {
                  if ($env =~ /^-I(.*)/)
                  {
                     push @arr, $1;
                  }
               }
            }
         }
      }

      $res = \@arr;
      $flags_cache{$flags} = $res;
   }
   return $res;
}

sub process_file
{
   my $files = @_[0];
   my $includes = @_[1];
   my $filename = @_[2];

   my $FILE;
   open($FILE, "<$filename");
   my $tries = 0;
   while (!$FILE)
   {
      sleep(0);
      open($FILE, "$<filename");
      die "can't open $filename\n" if ($tries++ > 5);
   }
   while (<$FILE>)
   {
      chomp;
      if (/# *include +(.*)/)
      {
         $_ = $1;
         my $incfile;
         if (/^\"([^\"]*)\"/)
         {
            $incfile = $1;
         }
         elsif (/^<([^>]*)>/)
         {
            $incfile = $1;
         }
         if ($incfile && !$files->{$incfile})
         {
            my @includesCopy = @$includes;

            unshift @includesCopy, dirname($filename);

            foreach $inc (@includesCopy)
            {
               my $candidate = "$inc" . "/$incfile";

               if (-e $candidate)
               {
                   $files->{$incfile} = $candidate;
                   process_file($files, $includes, $candidate);
               }
            }
         }
      }
   }
   close($FILE); 
}

my @roots;
foreach my $key (keys(%ENV))
{
   next if (!($key =~ /_ROOT$/));
   my $path = $ENV{$key};
   next if $path eq '';
   push @roots, $key;
}
@roots = sort {length($ENV{$b}) <=> length($ENV{$a})} @roots;

sub filter_dotdot
{
   my $file = shift;

   $_ = $file;
   s/[^\/\.]+\/\.\.\///g;
   $file= $_;

   return $file;
}

sub filter_roots
{
   my $file = shift;

   foreach my $root (@roots)
   {
      my $path = $ENV{$root};
      if (length($file) > length($path) &&
          substr($file, 0, length($path)) eq $path)
      {
         return '$(' . $root . ')' . filter_dotdot(substr($file, length($path)));
      }
   }
}

print '# This file was generated by "make depend".' . "\n";
print "#\n\n";

foreach (@ARGV)
{
   if (/\.([^.]*)$/)
   {
      my $filename = $_;
      my $ext = $1;
      my $extrec = $exts{$ext};

      if ($extrec)
      {
         my %files;
         my $includes;

         if ($extrec->{'env'})
         {
            $includes = get_flags($extrec->{'env'});
         }

         process_file(\%files, $includes, $filename); 

         my $obj = $filename;
         $obj =~ s/[^.]*$/o/;

         my $prefix;
         if (defined($ENV{'ROOT'}))
         {
            $prefix="\$($ENV{'ROOT'}" . "_ROOT)";
         }
         elsif (defined($project))
         {
            $prefix="\$($project" . "_ROOT)";
         }

         print "$prefix$obj: $prefix$filename";
         my %filteredFiles;
         foreach $value (values %files)
         {
            my $filtered = filter_roots($value);
            if ($filtered eq '')
            {
               $filtered=$prefix . filter_dotdot($value);
            }

            $filteredFiles{$filtered} = 1;
         }
         foreach $value (sort {$a cmp $b} keys %filteredFiles)
         {
            print " $value";
         }
         print "\n";

         if ($extrec->{'cc'})
         {
            print "\t$extrec->{'cc'}";
            foreach $env (split(/ /, $extrec->{'env'}))
            {
               print " \$($env)";
            }
            if (defined($project))
            {
               foreach $env (split(/ /, $extrec->{'env'}))
               {
                  print " \$($project" . "_$env)";
               }
            }
            print " -c -o \$@ \$<\n";
         }
      }
   }
}

